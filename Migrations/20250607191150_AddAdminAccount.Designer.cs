// <auto-generated />
using MangaMate.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MangaMate.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20250607191150_AddAdminAccount")]
    partial class AddAdminAccount
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MangaMate.Database.Models.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("BookStateId")
                        .HasColumnType("integer");

                    b.Property<int>("BookTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Release")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BookStateId");

                    b.HasIndex("BookTypeId");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("books", (string)null);
                });

            modelBuilder.Entity("MangaMate.Database.Models.BookGenre", b =>
                {
                    b.Property<int>("BookId")
                        .HasColumnType("integer");

                    b.Property<int>("GenreId")
                        .HasColumnType("integer");

                    b.HasKey("BookId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("books_genres", (string)null);
                });

            modelBuilder.Entity("MangaMate.Database.Models.BookPage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("integer");

                    b.Property<int>("Chapter")
                        .HasColumnType("integer");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<int>("Page")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.ToTable("book_pages", (string)null);
                });

            modelBuilder.Entity("MangaMate.Database.Models.BookState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("book_states", (string)null);
                });

            modelBuilder.Entity("MangaMate.Database.Models.BookType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("book_types", (string)null);
                });

            modelBuilder.Entity("MangaMate.Database.Models.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("genres", (string)null);
                });

            modelBuilder.Entity("MangaMate.Database.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<byte[]>("Avatar")
                        .HasColumnType("bytea");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Login")
                        .IsUnique();

                    b.ToTable("users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "admin",
                            Login = "admin",
                            Password = "admin",
                            Role = "Admin"
                        });
                });

            modelBuilder.Entity("MangaMate.Database.Models.UserBook", b =>
                {
                    b.Property<int>("BookId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("Assessment")
                        .HasColumnType("integer");

                    b.Property<int>("CurrentChapter")
                        .HasColumnType("integer");

                    b.Property<bool>("Favourite")
                        .HasColumnType("boolean");

                    b.Property<int>("StateId")
                        .HasColumnType("integer");

                    b.HasKey("BookId", "UserId");

                    b.HasIndex("StateId");

                    b.HasIndex("UserId");

                    b.ToTable("users_books", (string)null);
                });

            modelBuilder.Entity("MangaMate.Database.Models.UserState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("user_states", (string)null);
                });

            modelBuilder.Entity("MangaMate.Database.Models.Book", b =>
                {
                    b.HasOne("MangaMate.Database.Models.BookState", "BookState")
                        .WithMany("Books")
                        .HasForeignKey("BookStateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MangaMate.Database.Models.BookType", "BookType")
                        .WithMany("Books")
                        .HasForeignKey("BookTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BookState");

                    b.Navigation("BookType");
                });

            modelBuilder.Entity("MangaMate.Database.Models.BookGenre", b =>
                {
                    b.HasOne("MangaMate.Database.Models.Book", "BookFK")
                        .WithMany("BookGenres")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MangaMate.Database.Models.Genre", "GenreFK")
                        .WithMany("BookGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BookFK");

                    b.Navigation("GenreFK");
                });

            modelBuilder.Entity("MangaMate.Database.Models.BookPage", b =>
                {
                    b.HasOne("MangaMate.Database.Models.Book", "Book")
                        .WithMany("BookPages")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("MangaMate.Database.Models.UserBook", b =>
                {
                    b.HasOne("MangaMate.Database.Models.Book", "BookFK")
                        .WithMany("UserBooks")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MangaMate.Database.Models.UserState", "UserState")
                        .WithMany("UserBooks")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MangaMate.Database.Models.User", "UserFK")
                        .WithMany("UserBooks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BookFK");

                    b.Navigation("UserFK");

                    b.Navigation("UserState");
                });

            modelBuilder.Entity("MangaMate.Database.Models.Book", b =>
                {
                    b.Navigation("BookGenres");

                    b.Navigation("BookPages");

                    b.Navigation("UserBooks");
                });

            modelBuilder.Entity("MangaMate.Database.Models.BookState", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("MangaMate.Database.Models.BookType", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("MangaMate.Database.Models.Genre", b =>
                {
                    b.Navigation("BookGenres");
                });

            modelBuilder.Entity("MangaMate.Database.Models.User", b =>
                {
                    b.Navigation("UserBooks");
                });

            modelBuilder.Entity("MangaMate.Database.Models.UserState", b =>
                {
                    b.Navigation("UserBooks");
                });
#pragma warning restore 612, 618
        }
    }
}
